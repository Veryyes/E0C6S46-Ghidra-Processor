# Build with
# https://download.epson-europe.com/pub/electronics-de/asmic/4bit/62family/technicalmanual/tm_6s46.pdf
# https://download.epson-europe.com/pub/electronics-de/asmic/4bit/60family/62core_e.pdf

define endian=big;
define alignment=2;

define space register type=register_space size=2 wordsize=2;

# 6144 words x 12 bits (1 instruction == 12 bits)
define space rom type=ram_space size=2 wordsize=2 default;

# 640 words x 4 bits
define space ram type=ram_space size=2 wordsize=1;

# 160 words x 4 bits
define space display type=ram_space size=1 wordsize=1;

# 48 words x 4 bits
define space io type=ram_space size=1 wordsize=1; 

#############
# REGISTERS #
#############

# A and B registers are 4 bits each
# Register Pointer RP is a 4 bit register
# 	Address the first 16 words of ROM
# Stack Pointer (SP) is 8 bits
# New page pointer (NBP) (4 bits)
# New bank pointer (NPP) (1 bit)
# Program counter bank (PCB) (1 bit)
# Program counter page (PCP) (4 bits)
# Program counter step (PCS) (8 bits)
# Flag Register (I, D, Z, C)

define register offset=0 size=1 [A B RP NBP NPP PCB PCP PCS C Z D I];

@define PCSH "PCS[4,4]"
@define PCSL "PCS[0,4]"

# IX and IY are 12 bit registers
# Since we can't specify a non-integer number of bytes
# We round up to 2 bytes to represent the 12 bit register
define register offset=12 size=2 [IX IY SP PC];
# PC represents the address of the current instruction
# Since PC is equal to (PCS & 0xFF) | ((PCP & 0xF) << 8) | ((PCB & 0x1) << 12)
# PC is a 13bit value

@define SPH "SP[4,4]"
@define SPL "SP[0,4]"
@define XL "IX[0,4]"
@define XH "IX[4,4]"
@define XP "IX[8,4]"
@define XHL "IX[0,8]"
@define YL "IY[0,4]"
@define YH "IY[4,4]"
@define YP "IY[8,4]"
@define YHL "IY[0,8]"
			
##########
# TOKENS #
##########

# p -> 5bit imm or label (0x0-0x1f)
# s -> 8bit imm or label (0x00-0xff)
# l -> 8bit imm 
# i -> 4bit imm 
# instructions are 12 bits, but ghidra enforces multiples of 8
# Assume MSBs are 0x0 padded
define token instr(16)
	op = (8, 12)
	word1 = (4,7)
	word2 = (0,3)
	reg1 = (6,7)
	reg2 = (4,5)
	reg3 = (2,3)
	reg4 = (0,1)
	s = (0,7)
	l = (0,7)
	x = (0,7)
	y = (0,7)
	i = (0,3)
	r0 = (4,5)
	r1 = (2,3)
	r2 = (0,1)
	q = (0,1)
	n = (0,3)
	
	# Only the PSET instruction needs these weird 3 bit and 5 bit tokens
	three_bit = (5,7)
	p = (0,4)
;

################
# INSTRUCTIONS #				
################

# Branching Instructions
:PSET p is op=0xe & three_bit=0x2 & p {
	NBP = (p>>0x4) & 0x1;
	NPP = p & 0xf;
}

:JP s is op=0x0 & s {
	PCB = NBP;
	PCP = NPP;
	PCS = s;
	
	# Holy shit, getting this to properly jump in ghidra decomp took forever
	PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;

	goto [PC];
}

:JPC s is op=0x2 & s {
	if(C != 1) goto <end>;
		PCB = NBP;
		PCP = NPP;
		PCS = s;
		PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;
		goto [PC];
	<end>
}
:JPNC s is op=0x3 & s {
	if(C == 1) goto <end>;
		PCB = NBP;
		PCP = NPP;
		PCS = s;
		PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;
		goto [PC];
	<end>
}
:JPZ s is op=0x6 & s {
	if(Z != 1) goto <end>;
		PCB = NBP;
		PCP = NPP;
		PCS = s;
		PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;
		goto [PC];
	<end>
}
:JNZ s is op=0x7 & s {
	if(Z == 1) goto <end>;
		PCB = NBP;
		PCP = NPP;
		PCS = s;
		PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;
		goto [PC];
	<end>
}
:JPBA is op=0xf & word1=0xe & word2=0x8 {
	PCB = NBP;
	PCP = NPP;
	PCS = ((B & 0xf) << 0x4) | A & 0xf;
	PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;
	goto [PC];  
}

:CALL s is op=0x4 & s {
	PCB = NBP;
	*[ram]:1 SP-1 = PCP;
	*[ram]:1 SP-2 = PCS >> 4;
	*[ram]:1 SP-3 = (PCS & 0xf) + 1;
	SP = SP - 3;
	PCP = NPP;
	PCS = s;
	PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;
	call [PC]; 
}

:CALZ s is op=0x5 & s {
	PCB = NBP;
	*[ram]:1 SP-1 = PCP;
	*[ram]:1 SP-2 = PCS >> 4;
	*[ram]:1 SP-3 = (PCS & 0xf) + 1;
	SP = SP - 3;
	PCP = 0x0;
	PCS = s;
	PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;
	call [PC];
}
:RET is op=0xf & word1=0xd & word2=0xf {
	PCS = (*[ram]:1 SP) | ((*[ram]:1 (SP+1)) << 4);
	PCP = *[ram]:1 SP+2;
	SP = SP+3;
	PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;
	return [PC];
}
:RETS is op=0xf & word1=0xd & word2=0xe {
	PCS = (*[ram]:1 SP) | ((*[ram]:1 (SP+1)) << 4);
	PCP = *[ram]:1 SP+2;
	SP = SP+3;
	PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;
	PC = PC + 1;
	return [PC];
}
:RETD l is op=0x1 & l{
	PCS = (*[ram]:1 SP) | ((*[ram]:1 (SP+1)) << 4);
	PCP = *[ram]:1 SP+2;
	SP = SP+3;
	PC = 0x0000 | zext(PCS) | zext(PCP) << 0x8 | zext(PCB) << 0xc;
	*[ram]:1 IX = l & 0xf;
	*[ram]:1 IX+1 = (l >> 4) & 0xf;
	IX = IX+2;
	return [PC];
}

# Sys Control Instructions
:NOP5 is op=0xf & word1=0xf & word2=0xb {}
:NOP7 is op=0xf & word1=0xf & word2=0xf {}
:HALT is op=0xf & word1=0xf & word2=0x8 {}

# Index Operation Instructions
:INCX is op=0xe & word1=0xe & word2=0x0 { IX = IX + 1;}
:INCY is op=0xe & word1=0xf & word2=0x0 { IY = IY + 1;}
:LDX x is op=0xb & x { IX = IX & 0xf0 | x;}
:LDY y is op=0x8 & y { IY = IY & 0xf0 | y;}
#:LDXP r2 is op=0xe & word1=0x8 & reg3=0x0 & r2 {
#	selector:1 = r2;
#	if (selector == 0x0) goto <a>;
#	if (selector == 0x1) goto <b>;
#	if (selector == 0x2) goto <_x>;
#	if (selector == 0x3) goto <_y>;
#	goto <end>;
#	<a>
#		IX = (IX & 0x00ff) | ((zext(A) << 8) & 0x0f00);
#	goto <end>;
#	<b>
#		IX = (IX & 0x00ff) | ((zext(B) << 8) & 0x0f00);
#	goto <end>;
#	<_x>
#		IX = (IX & 0x00ff) | (zext(*[ram]:1 IX) << 8 & 0x0f00);
#	goto <end>;
#	<_y>
#		IX = (IX & 0x00ff) | (zext(*[ram]:1 IY) << 8 & 0x0f00);
#	<end>
#}

:LD_XP_A is op=0xe & word1=0x8 & reg3=0x0 & reg4=0x0 {}
:LD_XP_B is op=0xe & word1=0x8 & reg3=0x0 & reg4=0x1 {}
:LD_XP_X is op=0xe & word1=0x8 & reg3=0x0 & reg4=0x2 {}
:LD_XP_Y is op=0xe & word1=0x8 & reg3=0x0 & reg4=0x3 {}

#:LDXH r2 is op=0xe & word1=0x8 & reg3=0x1 & r2 {}
#:LDXL r2 is op=0xe & word1=0x8 & reg3=0x2 & r2 {}
#:LDYP r2 is op=0xe & word1=0x9 & reg3=0x0 & r2 {}
#:LDYH r2 is op=0xe & word1=0x9 & reg3=0x1 & r2 {}
#:LDYL r2 is op=0xe & word1=0x9 & reg3=0x2 & r2 {}
#:LDXP r2 is op=0xe & word1=0xa & reg3=0x0 & r2 {}
#:LDXH r2 is op=0xe & word1=0xa & reg3=0x1 & r2 {}
#:LDXL r2 is op=0xe & word1=0xa & reg3=0x2 & r2 {}
#:LDYP r2 is op=0xe & word1=0xb & reg3=0x0 & r2 {}
#:LDYH r2 is op=0xe & word1=0xb & reg3=0x1 & r2 {}
#:LDYL r2 is op=0xe & word1=0xb & reg3=0x2 & r2 {}
:LD_XH_A is op=0xe & word1=0x8 & reg3=0x1 & reg4=0x0 {}
:LD_XH_B is op=0xe & word1=0x8 & reg3=0x1 & reg4=0x1 {}
:LD_XH_MX is op=0xe & word1=0x8 & reg3=0x1 & reg4=0x2 {}
:LD_XH_MY is op=0xe & word1=0x8 & reg3=0x1 & reg4=0x3 {}
:LD_XL_A is op=0xe & word1=0x8 & reg3=0x2 & reg4=0x0 {}
:LD_XL_B is op=0xe & word1=0x8 & reg3=0x2 & reg4=0x1 {}
:LD_XL_MX is op=0xe & word1=0x8 & reg3=0x2 & reg4=0x2 {}
:LD_XL_MY is op=0xe & word1=0x8 & reg3=0x2 & reg4=0x3 {}
:LD_YP_A is op=0xe & word1=0x9 & reg3=0x0 & reg4=0x0 {}
:LD_YP_B is op=0xe & word1=0x9 & reg3=0x0 & reg4=0x1 {}
:LD_YP_MX is op=0xe & word1=0x9 & reg3=0x0 & reg4=0x2 {}
:LD_YP_MY is op=0xe & word1=0x9 & reg3=0x0 & reg4=0x3 {}
:LD_YH_A is op=0xe & word1=0x9 & reg3=0x1 & reg4=0x0 {}
:LD_YH_B is op=0xe & word1=0x9 & reg3=0x1 & reg4=0x1 {}
:LD_YH_MX is op=0xe & word1=0x9 & reg3=0x1 & reg4=0x2 {}
:LD_YH_MY is op=0xe & word1=0x9 & reg3=0x1 & reg4=0x3 {}
:LD_YL_A is op=0xe & word1=0x9 & reg3=0x2 & reg4=0x0 {}
:LD_YL_B is op=0xe & word1=0x9 & reg3=0x2 & reg4=0x1 {}
:LD_YL_MX is op=0xe & word1=0x9 & reg3=0x2 & reg4=0x2 {}
:LD_YL_MY is op=0xe & word1=0x9 & reg3=0x2 & reg4=0x3 {}
:LD_XP_A is op=0xe & word1=0xa & reg3=0x0 & reg4=0x0 {}
:LD_XP_B is op=0xe & word1=0xa & reg3=0x0 & reg4=0x1 {}
:LD_XP_MX is op=0xe & word1=0xa & reg3=0x0 & reg4=0x2 {}
:LD_XP_MY is op=0xe & word1=0xa & reg3=0x0 & reg4=0x3 {}
:LD_XH_A is op=0xe & word1=0xa & reg3=0x1 & reg4=0x0 {}
:LD_XH_B is op=0xe & word1=0xa & reg3=0x1 & reg4=0x1 {}
:LD_XH_MX is op=0xe & word1=0xa & reg3=0x1 & reg4=0x2 {}
:LD_XH_MY is op=0xe & word1=0xa & reg3=0x1 & reg4=0x3 {}
:LD_XL_A is op=0xe & word1=0xa & reg3=0x2 & reg4=0x0 {}
:LD_XL_B is op=0xe & word1=0xa & reg3=0x2 & reg4=0x1 {}
:LD_XL_MX is op=0xe & word1=0xa & reg3=0x2 & reg4=0x2 {}
:LD_XL_MY is op=0xe & word1=0xa & reg3=0x2 & reg4=0x3 {}
:LD_YP_A is op=0xe & word1=0xb & reg3=0x0 & reg4=0x0 {}
:LD_YP_B is op=0xe & word1=0xb & reg3=0x0 & reg4=0x1 {}
:LD_YP_MX is op=0xe & word1=0xb & reg3=0x0 & reg4=0x2 {}
:LD_YP_MY is op=0xe & word1=0xb & reg3=0x0 & reg4=0x3 {}
:LD_YH_A is op=0xe & word1=0xb & reg3=0x1 & reg4=0x0 {}
:LD_YH_B is op=0xe & word1=0xb & reg3=0x1 & reg4=0x1 {}
:LD_YH_MX is op=0xe & word1=0xb & reg3=0x1 & reg4=0x2 {}
:LD_YH_MY is op=0xe & word1=0xb & reg3=0x1 & reg4=0x3 {}
:LD_YL_A is op=0xe & word1=0xb & reg3=0x2 & reg4=0x0 {}
:LD_YL_B is op=0xe & word1=0xb & reg3=0x2 & reg4=0x1 {}
:LD_YL_MX is op=0xe & word1=0xb & reg3=0x2 & reg4=0x2 {}
:LD_YL_MY is op=0xe & word1=0xb & reg3=0x2 & reg4=0x3 {}
:ADCXH i is op=0xa & word1=0x0 & i {}
:ADCXL i is op=0xa & word1=0x1 & i {}
:ADCYH i is op=0xa & word1=0x2 & i {}
:ADCYL i is op=0xa & word1=0x3 & i {}
:CPXH i is op=0xa & word1=0x4 & i {}
:CPXL i is op=0xa & word1=0x5 & i {}
:CPYH i is op=0xa & word1=0x6 & i {}
:CPYL i is op=0xa & word1=0x7 & i {}

# Data Transfer Instructions
#:LD r0,i is op=0xe & reg1=0x0 & r0 & i {}
:LD_A i is op=0xe & reg1=0x0 & reg2=0x0 & i {}
:LD_B i is op=0xe & reg1=0x0 & reg2=0x1 & i {}
:LD_MX i is op=0xe & reg1=0x0 & reg2=0x2 & i {}
:LD_MY i is op=0xe & reg1=0x0 & reg2=0x3 & i {}
#:LD r1,q is op=0xe & word1=0xc & r1 & q {}
#:LD_A_A is op=0xe & word1=0xc & reg3=0x0 & reg4=0x0 {}
:LD_A_B is op=0xe & word1=0xc & reg3=0x0 & reg4=0x1 {}
:LD_A_MX is op=0xe & word1=0xc & reg3=0x0 & reg4=0x2 {}
:LD_A_MY is op=0xe & word1=0xc & reg3=0x0 & reg4=0x3 {}
:LD_B_A is op=0xe & word1=0xc & reg3=0x1 & reg4=0x0 {}
#:LD_B_B is op=0xe & word1=0xc & reg3=0x1 & reg4=0x1 {}
:LD_B_MX is op=0xe & word1=0xc & reg3=0x1 & reg4=0x2 {}
:LD_B_MY is op=0xe & word1=0xc & reg3=0x1 & reg4=0x3 {}
:LD_MX_A is op=0xe & word1=0xc & reg3=0x2 & reg4=0x0 {}
:LD_MX_B is op=0xe & word1=0xc & reg3=0x2 & reg4=0x1 {}
#:LD_MX_MX is op=0xe & word1=0xc & reg3=0x2 & reg4=0x2 {}
:LD_MX_MY is op=0xe & word1=0xc & reg3=0x2 & reg4=0x3 {}
:LD_MY_A is op=0xe & word1=0xc & reg3=0x3 & reg4=0x0 {}
:LD_MY_B is op=0xe & word1=0xc & reg3=0x3 & reg4=0x1 {}
:LD_MY_MX is op=0xe & word1=0xc & reg3=0x3 & reg4=0x2 {}
#:LD_MY_MY is op=0xe & word1=0xc & reg3=0x3 & reg4=0x3 {}

:LDA n is op=0xf & word1=0xa & n {}
:LDB n is op=0xf & word1=0xb & n {}
# LD Mn, A
:SWA n is op=0xf & word1=0x8 & n {}
# LD Mn, B
:SWB n is op=0xf & word1=0x9 & n {}
:LDPX_MX i is op=0xe & word1=0x6 & i {}
#:LDPX r1,q is op=0xe & word1=0xe & r1 & q {}
#:LDPX_A_A is op=0xe & word1=0xe & reg3=0 & reg4=0 {}
:LDPX_A_B is op=0xe & word1=0xe & reg3=0 & reg4=1 {}
:LDPX_A_MX is op=0xe & word1=0xe & reg3=0 & reg4=2 {}
:LDPX_A_MY is op=0xe & word1=0xe & reg3=0 & reg4=3 {}
:LDPX_B_A is op=0xe & word1=0xe & reg3=1 & reg4=0 {}
#:LDPX_B_B is op=0xe & word1=0xe & reg3=1 & reg4=1 {}
:LDPX_B_MX is op=0xe & word1=0xe & reg3=1 & reg4=2 {}
:LDPX_B_MY is op=0xe & word1=0xe & reg3=1 & reg4=3 {}
:LDPX_MX_A is op=0xe & word1=0xe & reg3=2 & reg4=0 {}
:LDPX_MX_B is op=0xe & word1=0xe & reg3=2 & reg4=1 {}
#:LDPX_MX_MX is op=0xe & word1=0xe & reg3=2 & reg4=2 {}
:LDPX_MX_MY is op=0xe & word1=0xe & reg3=2 & reg4=3 {}
:LDPX_MY_A is op=0xe & word1=0xe & reg3=3 & reg4=0 {}
:LDPX_MY_B is op=0xe & word1=0xe & reg3=3 & reg4=1 {}
:LDPX_MY_MX is op=0xe & word1=0xe & reg3=3 & reg4=2 {}
#:LDPX_MY_MY is op=0xe & word1=0xe & reg3=3 & reg4=3 {}

:LDPY_MY i is op=0xe & word1=0x7 & i {}
#:LDPY r1,q is op=0xe & word1=0xf & r1 & q {}
#:LDPY_A_A is op=0xe & word1=0xf & reg3=0 & reg4=0 {}
:LDPY_A_B is op=0xe & word1=0xf & reg3=0 & reg4=1 {}
:LDPY_A_MX is op=0xe & word1=0xf & reg3=0 & reg4=2 {}
:LDPY_A_MY is op=0xe & word1=0xf & reg3=0 & reg4=3 {}
:LDPY_B_A is op=0xe & word1=0xf & reg3=1 & reg4=0 {}
#:LDPY_B_B is op=0xe & word1=0xf & reg3=1 & reg4=1 {}
:LDPY_B_MX is op=0xe & word1=0xf & reg3=1 & reg4=2 {}
:LDPY_B_MY is op=0xe & word1=0xf & reg3=1 & reg4=3 {}
:LDPY_MX_A is op=0xe & word1=0xf & reg3=2 & reg4=0 {}
:LDPY_MX_B is op=0xe & word1=0xf & reg3=2 & reg4=1 {}
#:LDPY_MX_MX is op=0xe & word1=0xf & reg3=2 & reg4=2 {}
:LDPY_MX_MY is op=0xe & word1=0xf & reg3=2 & reg4=3 {}
:LDPY_MY_A is op=0xe & word1=0xf & reg3=3 & reg4=0 {}
:LDPY_MY_B is op=0xe & word1=0xf & reg3=3 & reg4=1 {}
:LDPY_MY_MX is op=0xe & word1=0xf & reg3=3 & reg4=2 {}
#:LDPY_MY_MY is op=0xe & word1=0xf & reg3=3 & reg4=3 {}

:LBPX l is op=0x9 & l {}

# Flag Operation Instructions
# F = I D Z C
:SET i is op=0xf & word1=0x4 & i {
	I = I | (i>>3 & 0x1);
	D = D | (i>>2 & 0x1);
	Z = Z | (i>>1 & 0x1);
	C = C | (i & 0x1);
}
:RST i is op=0xf & word1=0x5 & i {
	I = I & (i>>3 & 0x1);
	D = D & (i>>2 & 0x1);
	Z = Z & (i>>1 & 0x1);
	C = C & (i & 0x1);
}
:SCF is op=0xf & word1=0x4 & word2=0x1 { C = 1;}
:RCF is op=0xf & word1=0x5 & word2=0xe { C = 0;}
:SZF is op=0xf & word1=0x4 & word2=0x2 { Z = 1;}
:RZF is op=0xf & word1=0x5 & word2=0xd { Z = 0;}
:SDF is op=0xf & word1=0x4 & word2=0x4 { D = 1;}
:RDF is op=0xf & word1=0x5 & word2=0xb { D = 0;}
:EI is op=0xf & word1=0x4 & word2=0x8 {I = 1;}
:DI is op=0xf & word1=0x5 & word2=0x7 {I = 0;}

# Stack Operation Instructions
:INC is op=0xf & word1=0xd & word2=0xb {SP = SP + 1;}
:DEC is op=0xf & word1=0xc & word2=0xb {SP = SP - 1;}
#:PUSH r2 is op=0xf & word1=0xc & reg3=0x0 & r2 {
#	SP = SP - 1;
#	# TODO save value onto stack
#}
:PUSH_A is op=0xf & word1=0xc & reg3=0x0 & reg4=0x0 {
        SP = SP - 1;
        # TODO save value onto stack
}
:PUSH_B is op=0xf & word1=0xc & reg3=0x0 & reg4=0x1 {
        SP = SP - 1;
        # TODO save value onto stack
}
:PUSH_MX is op=0xf & word1=0xc & reg3=0x0 & reg4=0x2 {
        SP = SP - 1;
        # TODO save value onto stack
}
:PUSH_MY is op=0xf & word1=0xc & reg3=0x0 & reg4=0x3 {
        SP = SP - 1;
        # TODO save value onto stack
}

:PUSHXP is op=0xf & word1=0xc & word2=0x4 {
	SP = SP - 1;
	# TODO save value onto stack
}
:PUSHXH is op=0xf & word1=0xc & word2=0x5 {
	SP = SP - 1;
	# TODO save value onto stack
}
:PUSHXL is op=0xf & word1=0xc & word2=0x6 {
	SP = SP - 1;
	# TODO save value onto stack
}
:PUSHYP is op=0xf & word1=0xc & word2=0x7 {
	SP = SP - 1;
	# TODO save value onto stack
}
:PUSHYH is op=0xf & word1=0xc & word2=0x8 {
	SP = SP - 1;
	# TODO save value onto stack
}
:PUSHYL is op=0xf & word1=0xc & word2=0x9 {
	SP = SP - 1;
	# TODO save value onto stack
}
:PUSHF is op=0xf & word1=0xc & word2=0xa {
	# TODO read value from stack
	SP = SP + 1;
}
#:POP r2 is op=0xf & word1=0xd & reg3=0x0 & r2 {
#	# TODO read value from stack
#	SP = SP + 1;
#}
:POP_A is op=0xf & word1=0xd & reg3=0x0 & reg4=0x0 {
        # TODO read value from stack
        SP = SP + 1;
}
:POP_B is op=0xf & word1=0xd & reg3=0x0 & reg4=0x1 {
        # TODO read value from stack
        SP = SP + 1;
}
:POP_MX is op=0xf & word1=0xd & reg3=0x0 & reg4=0x2 {
        # TODO read value from stack
        SP = SP + 1;
}
:POP_MY is op=0xf & word1=0xd & reg3=0x0 & reg4=0x3 {
        # TODO read value from stack
        SP = SP + 1;
}

:POPXP is op=0xf & word1=0xd & word2=0x4 {
	# TODO read value from stack
	SP = SP + 1;
}
:POPXH is op=0xf & word1=0xd & word2=0x5 {
	# TODO read value from stack
	SP = SP + 1;
}
:POPXL is op=0xf & word1=0xd & word2=0x6 {
	# TODO read value from stack
	SP = SP + 1;
}
:POPYP is op=0xf & word1=0xd & word2=0x7 {
	# TODO read value from stack
	SP = SP + 1;
}
:POPYH is op=0xf & word1=0xd & word2=0x8 {
	# TODO read value from stack
	SP = SP + 1;
}
:POPYL is op=0xf & word1=0xd & word2=0x9 {
	# TODO read value from stack
	SP = SP + 1;
}
:POPF is op=0xf & word1=0xd & word2=0xa {
	# TODO read value from stack
	SP = SP + 1;
}

# LD SPH, r
:LD_SPH_A is op=0xf & word1=0xe & reg3=0x0 & reg4=0x0 {}
:LD_SPH_B is op=0xf & word1=0xe & reg3=0x0 & reg4=0x1 {}
:LD_SPH_MX is op=0xf & word1=0xe & reg3=0x0 & reg4=0x2 {}
:LD_SPH_MY is op=0xf & word1=0xe & reg3=0x0 & reg4=0x3 {}

# LD SPL, r
#:SWSPL r2 is op=0xf & word1=0xf & reg3=0x0 & r2 {}
:LD_SPL_A  is op=0xf & word1=0xf & reg3=0x0 & reg4=0x0 {}
:LD_SPL_B  is op=0xf & word1=0xf & reg3=0x0 & reg4=0x1 {}
:LD_SPL_MX  is op=0xf & word1=0xf & reg3=0x0 & reg4=0x2 {}
:LD_SPL_MY  is op=0xf & word1=0xf & reg3=0x0 & reg4=0x3 {}

#:LDSPH r2 is op=0xf & word1=0xe & reg3=0x1 & r2 {}
:LD_A_SPH is op=0xf & word1=0xe & reg3=0x1 & reg4=0x0 {}
:LD_B_SPH is op=0xf & word1=0xe & reg3=0x1 & reg4=0x1 {}
:LD_MX_SPH is op=0xf & word1=0xe & reg3=0x1 & reg4=0x2 {}
:LD_MY_SPH is op=0xf & word1=0xe & reg3=0x1 & reg4=0x3 {}

#:LDSPL r2 is op=0xf & word1=0xf & reg3=0x1 & r2 {}
:LD_A_SPL is op=0xf & word1=0xf & reg3=0x1 & reg4=0x0 {}
:LD_B_SPL is op=0xf & word1=0xf & reg3=0x1 & reg4=0x1 {}
:LD_MX_SPL is op=0xf & word1=0xf & reg3=0x1 & reg4=0x2 {}
:LD_MY_SPL is op=0xf & word1=0xf & reg3=0x1 & reg4=0x3 {}

# Arithmetic Instructions
#:ADD r0,i is op=0xc & reg1=0x0 & r0 & i {}
:ADD_A i is op=0xc & reg1=0x0 & reg2=0x0 & i {}
:ADD_B i is op=0xc & reg1=0x0 & reg2=0x1 & i {}
:ADD_MX i is op=0xc & reg1=0x0 & reg2=0x2 & i {}
:ADD_MY i is op=0xc & reg1=0x0 & reg2=0x3 & i {}

#:ADD r1,q is op=0xa & word1=0x8 & r1 & q {}
:ADD_A_A is op=0xa & word1=0x8 & reg3=0x0 & reg4=0x0 {}
:ADD_A_B is op=0xa & word1=0x8 & reg3=0x0 & reg4=0x1 {}
:ADD_A_MX is op=0xa & word1=0x8 & reg3=0x0 & reg4=0x2 {}
:ADD_A_MY is op=0xa & word1=0x8 & reg3=0x0 & reg4=0x3 {}
:ADD_B_A is op=0xa & word1=0x8 & reg3=0x1 & reg4=0x0 {}
:ADD_B_B is op=0xa & word1=0x8 & reg3=0x1 & reg4=0x1 {}
:ADD_B_MX is op=0xa & word1=0x8 & reg3=0x1 & reg4=0x2 {}
:ADD_B_MY is op=0xa & word1=0x8 & reg3=0x1 & reg4=0x3 {}
:ADD_MX_A is op=0xa & word1=0x8 & reg3=0x2 & reg4=0x0 {}
:ADD_MX_B is op=0xa & word1=0x8 & reg3=0x2 & reg4=0x1 {}
:ADD_MX_MX is op=0xa & word1=0x8 & reg3=0x2 & reg4=0x2 {}
:ADD_MX_MY is op=0xa & word1=0x8 & reg3=0x2 & reg4=0x3 {}
:ADD_MY_A is op=0xa & word1=0x8 & reg3=0x3 & reg4=0x0 {}
:ADD_MY_B is op=0xa & word1=0x8 & reg3=0x3 & reg4=0x1 {}
:ADD_MY_MX is op=0xa & word1=0x8 & reg3=0x3 & reg4=0x2 {}
:ADD_MY_MY is op=0xa & word1=0x8 & reg3=0x3 & reg4=0x3 {}

#:ADC r0,i is op=0xc & reg1=0x1 & r0 & i {}
:ADC_A i is op=0xc & reg1=0x1 & reg2=0x0 & i {}
:ADC_B i is op=0xc & reg1=0x1 & reg2=0x1 & i {}
:ADC_MX i is op=0xc & reg1=0x1 & reg2=0x2 & i {}
:ADC_MY i is op=0xc & reg1=0x1 & reg2=0x3 & i {}

#:ADC r1,q is op=0xa & word1=0x9 & r1 & q {}
:ADC_A_A is op=0xa & word1=0x9 & reg3=0x0 & reg4=0x0 {}
:ADC_A_B is op=0xa & word1=0x9 & reg3=0x0 & reg4=0x1 {}
:ADC_A_MX is op=0xa & word1=0x9 & reg3=0x0 & reg4=0x2 {}
:ADC_A_MY is op=0xa & word1=0x9 & reg3=0x0 & reg4=0x3 {}
:ADC_B_A is op=0xa & word1=0x9 & reg3=0x1 & reg4=0x0 {}
:ADC_B_B is op=0xa & word1=0x9 & reg3=0x1 & reg4=0x1 {}
:ADC_B_MX is op=0xa & word1=0x9 & reg3=0x1 & reg4=0x2 {}
:ADC_B_MY is op=0xa & word1=0x9 & reg3=0x1 & reg4=0x3 {}
:ADC_MX_A is op=0xa & word1=0x9 & reg3=0x2 & reg4=0x0 {}
:ADC_MX_B is op=0xa & word1=0x9 & reg3=0x2 & reg4=0x1 {}
:ADC_MX_MX is op=0xa & word1=0x9 & reg3=0x2 & reg4=0x2 {}
:ADC_MX_MY is op=0xa & word1=0x9 & reg3=0x2 & reg4=0x3 {}
:ADC_MY_A is op=0xa & word1=0x9 & reg3=0x3 & reg4=0x0 {}
:ADC_MY_B is op=0xa & word1=0x9 & reg3=0x3 & reg4=0x1 {}
:ADC_MY_MX is op=0xa & word1=0x9 & reg3=0x3 & reg4=0x2 {}
:ADC_MY_MY is op=0xa & word1=0x9 & reg3=0x3 & reg4=0x3 {}

#:SUB r1,q is op=0xa & word1=0xa & r1 & q {}
:SUB_A_A is op=0xa & word1=0xa & reg3=0x0 & reg4=0x0 {}
:SUB_A_B is op=0xa & word1=0xa & reg3=0x0 & reg4=0x1 {}
:SUB_A_MX is op=0xa & word1=0xa & reg3=0x0 & reg4=0x2 {}
:SUB_A_MY is op=0xa & word1=0xa & reg3=0x0 & reg4=0x3 {}
:SUB_B_A is op=0xa & word1=0xa & reg3=0x1 & reg4=0x0 {}
:SUB_B_B is op=0xa & word1=0xa & reg3=0x1 & reg4=0x1 {}
:SUB_B_MX is op=0xa & word1=0xa & reg3=0x1 & reg4=0x2 {}
:SUB_B_MY is op=0xa & word1=0xa & reg3=0x1 & reg4=0x3 {}
:SUB_MX_A is op=0xa & word1=0xa & reg3=0x2 & reg4=0x0 {}
:SUB_MX_B is op=0xa & word1=0xa & reg3=0x2 & reg4=0x1 {}
:SUB_MX_MX is op=0xa & word1=0xa & reg3=0x2 & reg4=0x2 {}
:SUB_MX_MY is op=0xa & word1=0xa & reg3=0x2 & reg4=0x3 {}
:SUB_MY_A is op=0xa & word1=0xa & reg3=0x3 & reg4=0x0 {}
:SUB_MY_B is op=0xa & word1=0xa & reg3=0x3 & reg4=0x1 {}
:SUB_MY_MX is op=0xa & word1=0xa & reg3=0x3 & reg4=0x2 {}
:SUB_MY_MY is op=0xa & word1=0xa & reg3=0x3 & reg4=0x3 {}

#:SBC r0,i is op=0xd & reg1=0x1 & r0 & i {}
:SBC_A i is op=0xd & reg1=0x1 & reg2=0x0 & i {}
:SBC_B i is op=0xd & reg1=0x1 & reg2=0x1 & i {}
:SBC_MX i is op=0xd & reg1=0x1 & reg2=0x2 & i {}
:SBC_MY i is op=0xd & reg1=0x1 & reg2=0x3 & i {}

#:SBC r1,q is op=0xa & word1=0xb & r1 & q {}
:SBC_A_A is op=0xa & word1=0xb & reg3=0x0 & reg4=0x0 {}
:SBC_A_B is op=0xa & word1=0xb & reg3=0x0 & reg4=0x1 {}
:SBC_A_MX is op=0xa & word1=0xb & reg3=0x0 & reg4=0x2 {}
:SBC_A_MY is op=0xa & word1=0xb & reg3=0x0 & reg4=0x3 {}
:SBC_B_A is op=0xa & word1=0xb & reg3=0x1 & reg4=0x0 {}
:SBC_B_B is op=0xa & word1=0xb & reg3=0x1 & reg4=0x1 {}
:SBC_B_MX is op=0xa & word1=0xb & reg3=0x1 & reg4=0x2 {}
:SBC_B_MY is op=0xa & word1=0xb & reg3=0x1 & reg4=0x3 {}
:SBC_MX_A is op=0xa & word1=0xb & reg3=0x2 & reg4=0x0 {}
:SBC_MX_B is op=0xa & word1=0xb & reg3=0x2 & reg4=0x1 {}
:SBC_MX_MX is op=0xa & word1=0xb & reg3=0x2 & reg4=0x2 {}
:SBC_MX_MY is op=0xa & word1=0xb & reg3=0x2 & reg4=0x3 {}
:SBC_MY_A is op=0xa & word1=0xb & reg3=0x3 & reg4=0x0 {}
:SBC_MY_B is op=0xa & word1=0xb & reg3=0x3 & reg4=0x1 {}
:SBC_MY_MX is op=0xa & word1=0xb & reg3=0x3 & reg4=0x2 {}
:SBC_MY_MY is op=0xa & word1=0xb & reg3=0x3 & reg4=0x3 {}

#:AND r0,i is op=0xc & reg1=0x2 & r0 & i {}
:AND_A i is op=0xc & reg1=0x2 & reg2=0x0 & i {}
:AND_B i is op=0xc & reg1=0x2 & reg2=0x1 & i {}
:AND_MX i is op=0xc & reg1=0x2 & reg2=0x2 & i {}
:AND_MY i is op=0xc & reg1=0x2 & reg2=0x3 & i {}

#:AND r1,q is op=0xa & word1=0xc & r1 & q {}
:AND_A_A is op=0xa & word1=0xc & reg3=0x0 & reg4=0x0 {}
:AND_A_B is op=0xa & word1=0xc & reg3=0x0 & reg4=0x1 {}
:AND_A_MX is op=0xa & word1=0xc & reg3=0x0 & reg4=0x2 {}
:AND_A_MY is op=0xa & word1=0xc & reg3=0x0 & reg4=0x3 {}
:AND_B_A is op=0xa & word1=0xc & reg3=0x1 & reg4=0x0 {}
:AND_B_B is op=0xa & word1=0xc & reg3=0x1 & reg4=0x1 {}
:AND_B_MX is op=0xa & word1=0xc & reg3=0x1 & reg4=0x2 {}
:AND_B_MY is op=0xa & word1=0xc & reg3=0x1 & reg4=0x3 {}
:AND_MX_A is op=0xa & word1=0xc & reg3=0x2 & reg4=0x0 {}
:AND_MX_B is op=0xa & word1=0xc & reg3=0x2 & reg4=0x1 {}
:AND_MX_MX is op=0xa & word1=0xc & reg3=0x2 & reg4=0x2 {}
:AND_MX_MY is op=0xa & word1=0xc & reg3=0x2 & reg4=0x3 {}
:AND_MY_A is op=0xa & word1=0xc & reg3=0x3 & reg4=0x0 {}
:AND_MY_B is op=0xa & word1=0xc & reg3=0x3 & reg4=0x1 {}
:AND_MY_MX is op=0xa & word1=0xc & reg3=0x3 & reg4=0x2 {}
:AND_MY_MY is op=0xa & word1=0xc & reg3=0x3 & reg4=0x3 {}


#:OR r0,i is op=0xc & reg1=0x3 & r0 & i {}
:OR_A i is op=0xc & reg1=0x3 & reg2=0x0 & i {}
:OR_B i is op=0xc & reg1=0x3 & reg2=0x1 & i {}
:OR_MX i is op=0xc & reg1=0x3 & reg2=0x2 & i {}
:OR_MY i is op=0xc & reg1=0x3 & reg2=0x3 & i {}

#:OR r1,q is op=0xa & word1=0xd & r1 & q {}
:OR_A_A is op=0xa & word1=0xd & reg3=0x0 & reg4=0x0 {}
:OR_A_B is op=0xa & word1=0xd & reg3=0x0 & reg4=0x1 {}
:OR_A_MX is op=0xa & word1=0xd & reg3=0x0 & reg4=0x2 {}
:OR_A_MY is op=0xa & word1=0xd & reg3=0x0 & reg4=0x3 {}
:OR_B_A is op=0xa & word1=0xd & reg3=0x1 & reg4=0x0 {}
:OR_B_B is op=0xa & word1=0xd & reg3=0x1 & reg4=0x1 {}
:OR_B_MX is op=0xa & word1=0xd & reg3=0x1 & reg4=0x2 {}
:OR_B_MY is op=0xa & word1=0xd & reg3=0x1 & reg4=0x3 {}
:OR_MX_A is op=0xa & word1=0xd & reg3=0x2 & reg4=0x0 {}
:OR_MX_B is op=0xa & word1=0xd & reg3=0x2 & reg4=0x1 {}
:OR_MX_MX is op=0xa & word1=0xd & reg3=0x2 & reg4=0x2 {}
:OR_MX_MY is op=0xa & word1=0xd & reg3=0x2 & reg4=0x3 {}
:OR_MY_A is op=0xa & word1=0xd & reg3=0x3 & reg4=0x0 {}
:OR_MY_B is op=0xa & word1=0xd & reg3=0x3 & reg4=0x1 {}
:OR_MY_MX is op=0xa & word1=0xd & reg3=0x3 & reg4=0x2 {}
:OR_MY_MY is op=0xa & word1=0xd & reg3=0x3 & reg4=0x3 {}

#:XOR r0,i is op=0xd & reg1=0x0 & r0 & i {}
:XOR_A i is op=0xd & reg1=0x0 & reg2=0x0 & i {}
:XOR_B i is op=0xd & reg1=0x0 & reg2=0x1 & i {}
:XOR_MX i is op=0xd & reg1=0x0 & reg2=0x2 & i {}
:XOR_MY i is op=0xd & reg1=0x0 & reg2=0x3 & i {}

#:XOR r1,q is op=0xa & word1=0xe & r1 & q {}
:XOR_A_A is op=0xa & word1=0xe & reg3=0x0 & reg4=0x0 {}
:XOR_A_B is op=0xa & word1=0xe & reg3=0x0 & reg4=0x1 {}
:XOR_A_MX is op=0xa & word1=0xe & reg3=0x0 & reg4=0x2 {}
:XOR_A_MY is op=0xa & word1=0xe & reg3=0x0 & reg4=0x3 {}
:XOR_B_A is op=0xa & word1=0xe & reg3=0x1 & reg4=0x0 {}
:XOR_B_B is op=0xa & word1=0xe & reg3=0x1 & reg4=0x1 {}
:XOR_B_MX is op=0xa & word1=0xe & reg3=0x1 & reg4=0x2 {}
:XOR_B_MY is op=0xa & word1=0xe & reg3=0x1 & reg4=0x3 {}
:XOR_MX_A is op=0xa & word1=0xe & reg3=0x2 & reg4=0x0 {}
:XOR_MX_B is op=0xa & word1=0xe & reg3=0x2 & reg4=0x1 {}
:XOR_MX_MX is op=0xa & word1=0xe & reg3=0x2 & reg4=0x2 {}
:XOR_MX_MY is op=0xa & word1=0xe & reg3=0x2 & reg4=0x3 {}
:XOR_MY_A is op=0xa & word1=0xe & reg3=0x3 & reg4=0x0 {}
:XOR_MY_B is op=0xa & word1=0xe & reg3=0x3 & reg4=0x1 {}
:XOR_MY_MX is op=0xa & word1=0xe & reg3=0x3 & reg4=0x2 {}
:XOR_MY_MY is op=0xa & word1=0xe & reg3=0x3 & reg4=0x3 {}

#:CP r0,i is op=0xd & reg1=0x3 & r0 & i {}
:CP_A i is op=0xd & reg1=0x3 & reg2=0x0 & i {}
:CP_B i is op=0xd & reg1=0x3 & reg2=0x1 & i {}
:CP_MX i is op=0xd & reg1=0x3 & reg2=0x2 & i {}
:CP_MY i is op=0xd & reg1=0x3 & reg2=0x3 & i {}

#:CP r1,q is op=0xf & word1=0x0 & r1 & q {}
:CP_A_A is op=0xf & word1=0x0 & reg3=0x0 & reg4=0x0 {}
:CP_A_B is op=0xf & word1=0x0 & reg3=0x0 & reg4=0x1 {}
:CP_A_MX is op=0xf & word1=0x0 & reg3=0x0 & reg4=0x2 {}
:CP_A_MY is op=0xf & word1=0x0 & reg3=0x0 & reg4=0x3 {}
:CP_B_A is op=0xf & word1=0x0 & reg3=0x1 & reg4=0x0 {}
:CP_B_B is op=0xf & word1=0x0 & reg3=0x1 & reg4=0x1 {}
:CP_B_MX is op=0xf & word1=0x0 & reg3=0x1 & reg4=0x2 {}
:CP_B_MY is op=0xf & word1=0x0 & reg3=0x1 & reg4=0x3 {}
:CP_MX_A is op=0xf & word1=0x0 & reg3=0x2 & reg4=0x0 {}
:CP_MX_B is op=0xf & word1=0x0 & reg3=0x2 & reg4=0x1 {}
:CP_MX_MX is op=0xf & word1=0x0 & reg3=0x2 & reg4=0x2 {}
:CP_MX_MY is op=0xf & word1=0x0 & reg3=0x2 & reg4=0x3 {}
:CP_MY_A is op=0xf & word1=0x0 & reg3=0x3 & reg4=0x0 {}
:CP_MY_B is op=0xf & word1=0x0 & reg3=0x3 & reg4=0x1 {}
:CP_MY_MX is op=0xf & word1=0x0 & reg3=0x3 & reg4=0x2 {}
:CP_MY_MY is op=0xf & word1=0x0 & reg3=0x3 & reg4=0x3 {}

#:FAN r0,i is op=0xd & reg1=0x2 & r0 & i {}
:FAN_A i is op=0xd & reg1=0x2 & reg2=0x0 & i {}
:FAN_B i is op=0xd & reg1=0x2 & reg2=0x1 & i {}
:FAN_MX i is op=0xd & reg1=0x2 & reg2=0x2 & i {}
:FAN_MY i is op=0xd & reg1=0x2 & reg2=0x3 & i {}

#:FAN r1,q is op=0xf & word1=0x1 & r1 & q {}
:FAN_A_A is op=0xf & word1=0x1 & reg3=0x0 & reg4=0x0 {}
:FAN_A_B is op=0xf & word1=0x1 & reg3=0x0 & reg4=0x1 {}
:FAN_A_MX is op=0xf & word1=0x1 & reg3=0x0 & reg4=0x2 {}
:FAN_A_MY is op=0xf & word1=0x1 & reg3=0x0 & reg4=0x3 {}
:FAN_B_A is op=0xf & word1=0x1 & reg3=0x1 & reg4=0x0 {}
:FAN_B_B is op=0xf & word1=0x1 & reg3=0x1 & reg4=0x1 {}
:FAN_B_MX is op=0xf & word1=0x1 & reg3=0x1 & reg4=0x2 {}
:FAN_B_MY is op=0xf & word1=0x1 & reg3=0x1 & reg4=0x3 {}
:FAN_MX_A is op=0xf & word1=0x1 & reg3=0x2 & reg4=0x0 {}
:FAN_MX_B is op=0xf & word1=0x1 & reg3=0x2 & reg4=0x1 {}
:FAN_MX_MX is op=0xf & word1=0x1 & reg3=0x2 & reg4=0x2 {}
:FAN_MX_MY is op=0xf & word1=0x1 & reg3=0x2 & reg4=0x3 {}
:FAN_MY_A is op=0xf & word1=0x1 & reg3=0x3 & reg4=0x0 {}
:FAN_MY_B is op=0xf & word1=0x1 & reg3=0x3 & reg4=0x1 {}
:FAN_MY_MX is op=0xf & word1=0x1 & reg3=0x3 & reg4=0x2 {}
:FAN_MY_MY is op=0xf & word1=0x1 & reg3=0x3 & reg4=0x3 {}

# Instruction set is weird on this one
# bits (2,3) and (0,1) are set to r1, r0 bits, which are the same...
# Weird Specifying this since it would look like 2 args to Ghidra so
# Going to make two versions for r to be in both positions
#:RLC1 r1 is op=0xa & word1=0xf & reg4=0x0 & r1 {}
#:RLC2 r2 is op=0xa & word1=0xf & reg3=0x0 & r2 {}

:RLC_A is op=0xa & word1=0xf & reg3=0x0 & reg4=0x0 {}
:RLC_B is op=0xa & word1=0xf & reg3=0x1 & reg4=0x1 {}
:RLC_MX is op=0xa & word1=0xf & reg3=0x2 & reg4=0x2 {}
:RLC_MY is op=0xa & word1=0xf & reg3=0x3 & reg4=0x3 {}

#:RRC r2 is op=0xe & word1=0x8 & reg3=0x3 & r2 {}
:RRC_A is op=0xe & word1=0x8 & reg3=0x3 & reg4=0x0 {}
:RRC_B is op=0xe & word1=0x8 & reg3=0x3 & reg4=0x1 {}
:RRC_MX is op=0xe & word1=0x8 & reg3=0x3 & reg4=0x2 {}
:RRC_MY is op=0xe & word1=0x8 & reg3=0x3 & reg4=0x3 {}

:INC_M n is op=0xf & word1=0x6 & n {}
:DEC_M n is op=0xf & word1=0x7 & n {}
#:ACPX r2 is op=0xf & word1=0x2 & reg3=0x2 & r2 {}
:ACPX_A is op=0xf & word1=0x2 & reg3=0x2 & reg4=0x0 {}
:ACPX_B is op=0xf & word1=0x2 & reg3=0x2 & reg4=0x1 {}
:ACPX_MX is op=0xf & word1=0x2 & reg3=0x2 & reg4=0x2 {}
:ACPX_MY is op=0xf & word1=0x2 & reg3=0x2 & reg4=0x3 {}

#:ACPY r2 is op=0xf & word1=0x2 & reg3=0x3 & r2 {}
:ACPY_A is op=0xf & word1=0x2 & reg3=0x3 & reg4=0x0 {}
:ACPY_B is op=0xf & word1=0x2 & reg3=0x3 & reg4=0x1 {}
:ACPY_MX is op=0xf & word1=0x2 & reg3=0x3 & reg4=0x2 {}
:ACPY_MY is op=0xf & word1=0x2 & reg3=0x3 & reg4=0x3 {}

#:SCPX r2 is op=0xf & word1=0x3 & reg3=0x2 & r2 {}
:SCPX_A is op=0xf & word1=0x3 & reg3=0x2 & reg4=0x0 {}
:SCPX_B is op=0xf & word1=0x3 & reg3=0x2 & reg4=0x1 {}
:SCPX_MX is op=0xf & word1=0x3 & reg3=0x2 & reg4=0x2 {}
:SCPX_MY is op=0xf & word1=0x3 & reg3=0x2 & reg4=0x3 {}

#:SCPY r2 is op=0xf & word1=0x3 & reg3=0x3 & r2 {}
:SCPY_A is op=0xf & word1=0x3 & reg3=0x3 & reg4=0x0 {}
:SCPY_B is op=0xf & word1=0x3 & reg3=0x3 & reg4=0x1 {}
:SCPY_MX is op=0xf & word1=0x3 & reg3=0x3 & reg4=0x2 {}
:SCPY_MY is op=0xf & word1=0x3 & reg3=0x3 & reg4=0x3 {}

#:NOT r0 is op=0xd & reg1=0x0 & word2=0xf & r0 {}
:NOT_A is op=0xd & reg1=0x0 & word2=0xf & reg2=0x0 {}
:NOT_B is op=0xd & reg1=0x0 & word2=0xf & reg2=0x1 {}
:NOT_MX is op=0xd & reg1=0x0 & word2=0xf & reg2=0x2 {}
:NOT_MY is op=0xd & reg1=0x0 & word2=0xf & reg2=0x3 {}

